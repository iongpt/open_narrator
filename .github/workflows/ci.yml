name: CI Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'PROGRESS.md'
      - 'CLAUDE.md'
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'PROGRESS.md'
      - 'CLAUDE.md'

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run Black (Code Formatting)
      run: |
        black --check --diff app/ tests/ || echo "Warning: Black formatting issues found"
      continue-on-error: true

    - name: Run Ruff (Linting)
      run: |
        ruff check app/ tests/

    - name: Run MyPy (Type Checking)
      run: |
        mypy app/ --ignore-missing-imports

  test:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsndfile1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run tests with coverage
      env:
        # Mock API keys for testing
        ANTHROPIC_API_KEY: test-key-for-ci
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=10

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage.xml
        retention-days: 30

  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: opennarrator:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test, pre-commit, docker-build]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        if [ "${{ needs.lint.result }}" != "success" ] || \
           [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.pre-commit.result }}" != "success" ] || \
           [ "${{ needs.docker-build.result }}" != "success" ]; then
          echo "One or more CI jobs failed"
          exit 1
        fi
        echo "All CI jobs passed successfully!"
